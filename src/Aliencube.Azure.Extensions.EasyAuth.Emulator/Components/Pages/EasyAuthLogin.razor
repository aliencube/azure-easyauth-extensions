@page "/.auth/login/{identityProvider}"
@inject IEasyAuthService EasyAuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3>Azure EasyAuth Emulator</h3>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="authentication-type">Provider</label>
                <div class="col-10">
                    <input type="text" class="form-control" id="authentication-type" placeholder="Choose an auth provider" value="@IdentityProvider" disabled required>
                    <small class="form-text text-muted">Name of the identity provider</small>
                </div>
            </div>

            @if (this.IdentityProviderType == IdentityProviderType.EntraID)
            {
                <div class="row mb-3">
                    <label class="form-label col-2 text-end" for="tenant-id">Tenant ID</label>
                    <div class="col-10">
                        <input type="text" class="form-control" id="tenant-id" placeholder="Enter a tenant ID" @bind="@TenantId" required>
                        <small class="form-text text-muted">A tenant ID</small>
                    </div>
                </div>
            }

            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="client-id">Client ID</label>
                <div class="col-10">
                    <input type="text" class="form-control" id="client-id" placeholder="Enter a client ID" @bind="@ClientId" required>
                    <small class="form-text text-muted">A client ID</small>
                </div>
            </div>

            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="user-id">User ID</label>
                <div class="col-10">
                    <input type="text" class="form-control" id="user-id" placeholder="Choose a user ID" @bind="@UserId" required>
                    <small class="form-text text-muted">A user ID</small>
                </div>
            </div>

            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="username">Username</label>
                <div class="col-10">
                    <input type="text" class="form-control" id="username" placeholder="Choose a username" @bind="@Username" required>
                    <small class="form-text text-muted">Username or email address</small>
                </div>
            </div>

            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="user-roles">User's roles</label>
                <div class="col-10">
                    <textarea class="form-control" id="user-roles" rows="3" @bind="@UserRoles"></textarea>
                    <small class="form-text text-muted">Roles used during authorization. One role per line.</small>
                    <small class="form-text text-muted">Note: roles "User" and "Admin" will be added automatically if not provided.</small>
                </div>
            </div>

            <div class="row mb-3">
                <label class="form-label col-2 text-end" for="user-claims">User's claims</label>
                <div class="col-10">
                    <textarea class="form-control" id="user-claims" rows="6" placeholder="[{'typ': 'name','val': 'Azure EasyAuth'}]" @bind="@UserClaims"></textarea>
                    <small class="form-text text-muted">Claims from the identity provider. JSON array of claims.</small>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-2"></div>
                <div class="col-10 d-flex justify-content-start">
                    <button class="btn btn-primary me-2" @onclick="LoginAsync">Login</button>
                    <button class="btn btn-danger" @onclick="ClearAsync">Clear</button>
                </div>
            </div>
        </div>
    </div>
</div>

<Footer />

@code {
    private IdentityProviderType IdentityProviderType { get; set; }
    private string? TenantId { get; set; }
    private string? ClientId { get; set; }
    private string? UserId { get; set; }
    private string? Username { get; set; }
    private string? UserRoles { get; set; }
    private string? UserClaims { get; set; }

    [Parameter]
    public string? IdentityProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IdentityProviderType = this.EasyAuthService.GetIdentityProvider(this.IdentityProvider);
        this.TenantId = this.EasyAuthService.TenantId.ToString();
        this.ClientId = this.EasyAuthService.ClientId.ToString();
        this.UserId = this.EasyAuthService.UserId.ToString();
        this.Username = string.Empty;
        this.UserRoles = this.ParseUserRoles(this.EasyAuthService.UserRoles);
        this.UserClaims = this.ParseUserClaims(await this.EasyAuthService.GetDefaultUserClaims(this.IdentityProvider));

        await Task.CompletedTask;
    }

    protected async Task LoginAsync()
    {
        var signedIn = false;
        try
        {
            var signInContext = new UserSignInContext(this.IdentityProvider, this.TenantId, this.ClientId, this.UserId, this.Username, this.UserRoles, this.UserClaims);
            signedIn = await this.EasyAuthService.UserSignInAsync(this.ProtectedSessionStorage, signInContext);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

            return;
        }

        if (signedIn)
        {
            this.NavigationManager.NavigateTo("/.auth/login/done");
        }
    }

    protected async Task ClearAsync()
    {
        this.UserId = this.EasyAuthService.UserId.ToString("N");
        this.Username = string.Empty;
        this.UserRoles = this.ParseUserRoles(this.EasyAuthService.UserRoles);
        this.UserClaims = this.ParseUserClaims(await this.EasyAuthService.GetDefaultUserClaims(this.IdentityProvider));

        await Task.CompletedTask;
    }

    private string ParseUserRoles(IEnumerable<string> userRoles)
    {
        var parsed = userRoles.Aggregate(string.Empty, (acc, role) => $"{acc}\n{role}");

        return parsed.Trim();
    }

    private string ParseUserClaims(IEnumerable<MsClientPrincipalClaim> userClaims)
    {
        var serialised = JsonSerializer.Serialize(userClaims, this.EasyAuthService.JsonSerializerOptions);

        return serialised ?? "[]";
    }
}